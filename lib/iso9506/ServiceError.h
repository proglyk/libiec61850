/*
 * Generated by asn1c-0.9.21 (http://lionet.info/asn1c)
 * From ASN.1 module "MMS"
 * 	found in "mms-extended-mod3.asn"
 */

#ifndef	_ServiceError_H_
#define	_ServiceError_H_


#include <asn_application.h>

/* Including external dependencies */
#include <asn_integer.h>
#include <VisibleString.h>
#include <constr_CHOICE.h>
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum errorClass_PR {
	errorClass_PR_NOTHING,	/* No components present */
	errorClass_PR_vmdstate,
	errorClass_PR_applicationreference,
	errorClass_PR_definition,
	errorClass_PR_resource,
	errorClass_PR_service,
	errorClass_PR_servicepreempt,
	errorClass_PR_timeresolution,
	errorClass_PR_access,
	errorClass_PR_initiate,
	errorClass_PR_conclude,
	errorClass_PR_cancel,
	errorClass_PR_file,
	errorClass_PR_others
} errorClass_PR;
typedef enum vmdstate {
	vmdstate_other	= 0,
	vmdstate_vmdstateconflict	= 1,
	vmdstate_vmdoperationalproblem	= 2,
	vmdstate_domaintransferproblem	= 3,
	vmdstate_statemachineidinvalid	= 4
} e_vmdstate;
typedef enum applicationreference {
	applicationreference_other	= 0,
	applicationreference_aplicationunreachable	= 1,
	applicationreference_connectionlost	= 2,
	applicationreference_applicationreferenceinvalid	= 3,
	applicationreference_contextunsupported	= 4
} e_applicationreference;
typedef enum definition {
	definition_other	= 0,
	definition_objectundefined	= 1,
	definition_invalidaddress	= 2,
	definition_typeunsupported	= 3,
	definition_typeinconsistent	= 4,
	definition_objectexists	= 5,
	definition_objectattributeinconsistent	= 6
} e_definition;
typedef enum resource {
	resource_other	= 0,
	resource_memoryunavailable	= 1,
	resource_processorresourceunavailable	= 2,
	resource_massstorageunavailable	= 3,
	resource_capabilityunavailable	= 4,
	resource_capabilityunknown	= 5
} e_resource;
typedef enum service {
	service_other	= 0,
	service_primitivesoutofsequence	= 1,
	service_objectstateconflict	= 2,
	service_pdusize	= 3,
	service_continuationinvalid	= 4,
	service_objectconstraintconflict	= 5
} e_service;
typedef enum servicepreempt {
	servicepreempt_other	= 0,
	servicepreempt_timeout	= 1,
	servicepreempt_deadlock	= 2,
	servicepreempt_cancel	= 3
} e_servicepreempt;
typedef enum timeresolution {
	timeresolution_other	= 0,
	timeresolution_unsupportabletimeresolution	= 1
} e_timeresolution;
typedef enum access {
	access_other	= 0,
	access_objectaccessunsupported	= 1,
	access_objectnonexistent	= 2,
	access_objectaccessdenied	= 3,
	access_objectinvalidated	= 4
} e_access;
typedef enum initiate {
	initiate_other	= 0,
	initiate_versionincompatible	= 1,
	initiate_maxsegmentinsufficient	= 2,
	initiate_maxservicesoutstandingcallinginsufficient	= 3,
	initiate_maxservicesoutstandingcalledinsufficient	= 4,
	initiate_serviceCBBinsufficient	= 5,
	initiate_parameterCBBinsufficient	= 6,
	initiate_nestinglevelinsufficient	= 7
} e_initiate;
typedef enum conclude {
	conclude_other	= 0,
	conclude_furthercommunicationrequired	= 1
} e_conclude;
typedef enum cancel {
	cancel_other	= 0,
	cancel_invokeidunknown	= 1,
	cancel_cancelnotpossible	= 2
} e_cancel;
typedef enum file {
	file_other	= 0,
	file_filenameambiguous	= 1,
	file_filebusy	= 2,
	file_filenamesyntaxError	= 3,
	file_contenttypeinvalid	= 4,
	file_positioninvalid	= 5,
	file_fileaccesdenied	= 6,
	file_filenonexistent	= 7,
	file_duplicatefilename	= 8,
	file_insufficientspaceinfilestore	= 9
} e_file;

/* ServiceError */
typedef struct ServiceError {
	struct errorClass {
		errorClass_PR present;
		union ServiceError__errorClass_u {
			INTEGER_t	 vmdstate;
			INTEGER_t	 applicationreference;
			INTEGER_t	 definition;
			INTEGER_t	 resource;
			INTEGER_t	 service;
			INTEGER_t	 servicepreempt;
			INTEGER_t	 timeresolution;
			INTEGER_t	 access;
			INTEGER_t	 initiate;
			INTEGER_t	 conclude;
			INTEGER_t	 cancel;
			INTEGER_t	 file;
			INTEGER_t	 others;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} errorClass;
	INTEGER_t	*additionalCode	/* OPTIONAL */;
	VisibleString_t	*additionalDescription	/* OPTIONAL */;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} ServiceError_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_ServiceError;

#ifdef __cplusplus
}
#endif

#endif	/* _ServiceError_H_ */
